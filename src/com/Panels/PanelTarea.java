/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author Acer
 */

package com.Panels;
import com.toedter.calendar.JDateChooser;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import com.main.test.Tests2.MinHeapForTareas;


public class PanelTarea extends javax.swing.JPanel {
        public MinHeapForTareas minHeap;

    /*private void agregarFila(String fecha, String tarea) {
        CustomTableModel modelo = (CustomTableModel) tablaDeTareas.getModel();
        Object[] nuevaFila = {fecha, tarea}; // La última celda contiene el botón
        modelo.addRow(nuevaFila);
    }*/
    
    /*private void limpiarTabla(){
        CustomTableModel modelo = (CustomTableModel) tablaDeTareas.getModel();
        modelo.setRowCount(0);
    }*/
    
    /*private void agregarDato(String value, int row, int col){
        CustomTableModel modelo = (CustomTableModel) tablaDeTareas.getModel();
        modelo.setValueAt(value, row, col);
    }*/
    
    private static long calcularPrioridad(Date fechaSeleccionada) {
        Calendar calActual = Calendar.getInstance();
        Calendar calSeleccionada = Calendar.getInstance();
        calSeleccionada.setTime(fechaSeleccionada);

        long diferenciaEnMilisegundos = calSeleccionada.getTimeInMillis() - calActual.getTimeInMillis();
        long diferenciaEnDias = TimeUnit.DAYS.convert(diferenciaEnMilisegundos, TimeUnit.MILLISECONDS);

        return diferenciaEnDias;
    }
    /**
     * Creates new form Panel1
     */
    public PanelTarea() {
        initComponents();
        configurarTablaTareas();
        minHeap = new MinHeapForTareas(10);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void configurarTablaTareas() {
        // Crear y establecer el modelo de la tabla
        NonEditableTableModel modeloTablaTareas = new NonEditableTableModel(
            new Object[] {"Fecha", "Tarea"}, // Nombres de las columnas
            0 // Número inicial de filas
        );
        tablaDeTareas.setModel(modeloTablaTareas);

        // Configurar las características visuales de la tabla
        tablaDeTareas.setFont(new Font("SansSerif", Font.PLAIN, 14)); // Fuente Serif, tamaño 14, estilo normal

        // Establecer el ancho de las columnas
        TableColumn columnaFecha = tablaDeTareas.getColumnModel().getColumn(0);
        columnaFecha.setPreferredWidth(180);

        TableColumn columnaTarea = tablaDeTareas.getColumnModel().getColumn(1);
        columnaTarea.setPreferredWidth(570-205);

        
        tablaDeTareas.setRowHeight(30); // Ajusta la altura de las filas en píxeles

    }

    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaDeTareas = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        LabelFecha = new javax.swing.JLabel();
        LabelDescripcion = new javax.swing.JLabel();
        LabelRestantes = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1000, 675));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1000, 675));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(978, 1000));

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 50)); // NOI18N
        jLabel1.setText("TAREAS");
        jLabel1.setPreferredSize(new java.awt.Dimension(52, 16));

        jButton1.setText("Agregar Tarea");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        tablaDeTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Fecha", "Tarea"
            }
        ));
        jScrollPane3.setViewportView(tablaDeTareas);

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("PRÓXIMA TAREA");

        LabelFecha.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        LabelFecha.setText("...");

        LabelDescripcion.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        LabelDescripcion.setText("...");

        LabelRestantes.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        LabelRestantes.setText("Tareas restantes: 0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelFecha)
                    .addComponent(LabelDescripcion)
                    .addComponent(LabelRestantes))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelFecha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelDescripcion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelRestantes)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jButton2.setText("Eliminar Próxima Tarea");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(7, 7, 7)
                                .addComponent(jButton2))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 910, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField1)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(677, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NonEditableTableModel modeloTablaTareas = (NonEditableTableModel)tablaDeTareas.getModel();
        String fecha = ((JTextField) jDateChooser1.getDateEditor().getUiComponent()).getText(); // Obtener la fecha seleccionada
        String tarea = jTextField1.getText(); // Obtener el texto de la tarea
        Date fechaSeleccionada = jDateChooser1.getDate(); // Obtener la fecha seleccionada

        // Verificar que ambos campos tengan contenido
        if (fecha.isEmpty() || tarea.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, complete ambos campos.");
            return;
        }

        //agregarFila(fecha, tarea);

        long prioridad = calcularPrioridad(fechaSeleccionada);
        minHeap.insert(prioridad, fecha, tarea);

            LabelFecha.setText("Fecha: " + minHeap.getMinFecha());
            LabelDescripcion.setText("Tarea: " + minHeap.getMinTarea());
            LabelRestantes.setText("Tareas Restantes: " + minHeap.getN());

        //limpiarTabla(); // Limpiar la tabla
                        modeloTablaTareas.setRowCount(0);

        for (int i = 0; i < minHeap.getN(); i++){
            //addRow;
            String[] arr = {minHeap.getFecha()[i + 1], minHeap.getTarea()[i+1]};
            modeloTablaTareas.addRow(arr);
            //agregarDato(minHeap.getTarea()[i + 1],i, 1);
        }
        
        // Limpiar los campos después de agregar la fila
        jDateChooser1.setDate(null);
        jTextField1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        NonEditableTableModel modeloTablaTareas = (NonEditableTableModel)tablaDeTareas.getModel();
        minHeap.extractMin();
        if (!minHeap.isEmpty()){
            LabelFecha.setText("Fecha: " + minHeap.getMinFecha());
            LabelDescripcion.setText("Tarea: " + minHeap.getMinTarea());
            LabelRestantes.setText("Tareas Restantes: " + minHeap.getN());
        }
        else {
            LabelFecha.setText("...");
            LabelDescripcion.setText("...");
            LabelRestantes.setText("Tareas Restantes: 0");
        }
        modeloTablaTareas.setRowCount(0);

        for (int i = 0; i < minHeap.getN(); i++){
            //addRow;
            String[] arr = {minHeap.getFecha()[i + 1], minHeap.getTarea()[i+1]};
            modeloTablaTareas.addRow(arr);
            //agregarDato(minHeap.getTarea()[i + 1],i, 1);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelDescripcion;
    private javax.swing.JLabel LabelFecha;
    private javax.swing.JLabel LabelRestantes;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tablaDeTareas;
    // End of variables declaration//GEN-END:variables
}

class CustomTableModel extends DefaultTableModel {
    public CustomTableModel(Object[] columnNames, int rowCount) {
        super(columnNames, rowCount);
    }

    @Override
    public boolean isCellEditable(int row, int column) {
        // Make the button column editable
        return column == getColumnCount() - 1;
    }
}

class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
        setText("X");
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected) {
            setForeground(table.getSelectionForeground());
            setBackground(table.getSelectionBackground());
        } else {
            setForeground(table.getForeground());
            setBackground(table.getBackground());
        }
        return this;
    }
}

class ButtonEditor extends DefaultCellEditor {
    private final JButton button;
    private JTable table;

    public ButtonEditor(JTable table) {
        super(new JCheckBox());
        this.table = table;
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int row = table.convertRowIndexToModel(table.getEditingRow());
                String fecha = (String) table.getModel().getValueAt(row, 0);
                String tarea = (String) table.getModel().getValueAt(row, 1);
                JOptionPane.showMessageDialog(button, "Button clicked for row with fecha: " + fecha + " and tarea: " + tarea);
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected) {
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        return button.getText();
    }
}


class NonEditableTableModel extends DefaultTableModel {
    public NonEditableTableModel(Object[] columnNames, int rowCount) {
        super(columnNames, rowCount);
    }

    @Override
    public boolean isCellEditable(int row, int column) {
        return false; // Las celdas no son editables
    }
    
}
